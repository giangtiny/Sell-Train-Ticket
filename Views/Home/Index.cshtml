@model Sell_Train_Ticket.ViewModels.FindTripViewModel
@{
    ViewBag.Title = "Home Page";
}

<main class="container">

    <div id="myCarousel" class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-indicators">
            <button type="button" data-bs-target="#myCarousel" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
            <button type="button" data-bs-target="#myCarousel" data-bs-slide-to="1" aria-label="Slide 2"></button>
            <button type="button" data-bs-target="#myCarousel" data-bs-slide-to="2" aria-label="Slide 3"></button>
        </div>
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img src="https://wallpaperaccess.com/full/1457305.jpg" width="100%" height="100%">

                <div class="container">
                    <div class="carousel-caption text-start">
                        <h1>Buy ticket online.</h1>
                        <p>Available for you anywhere and anytime.</p>
                    </div>
                </div>
            </div>
            <div class="carousel-item">
                <img src="https://ak.picdn.net/shutterstock/videos/15040414/thumb/11.jpg" width="100%" height="100%">

                <div class="container">
                    <div class="carousel-caption">
                        <h1>Fully equipped facilities.</h1>
                        <p>Fully supply everthing you need in your trip.</p>
                    </div>
                </div>
            </div>
            <div class="carousel-item">
                <img src="https://www.groundedlifetravel.com/wp-content/uploads/2021/05/Amtrak-North-Dakota-scaled.jpg" width="100%" height="100%">

                <div class="container">
                    <div class="carousel-caption text-end">
                        <h1>Great service quality.</h1>
                        <p>Customers are always our first priority.</p>
                    </div>
                </div>
            </div>
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#myCarousel" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#myCarousel" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>

    <div class="row mb-2 justify-content-center">
        <div class="col-md-9">
            <div class="g-0 border rounded overflow-hidden shadow-sm p-4">
                <h2>Trip Information</h2>
                @using (Html.BeginForm("FindTrip", "Ticket", new { @class = "" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary("", new { @class = "text-danger" })
                    <div class="autocomplete">
                        <label class="control-label" for="DepartureStation">Departure Station</label>
                        @Html.DropDownListFor(m => m.DepartureStation, new SelectList(Model.Stations, "Id", "Name"), "Choose Station", new { @class = "form-control" })         
                    </div>
                    <div class="autocomplete">
                        <label class="control-label" for="DestinationStation">Destination Station</label>
                        @Html.DropDownListFor(m => m.DestinationStation, new SelectList(Model.Stations, "Id", "Name"), "Choose Station", new { @class = "form-control" })
                    </div>
                    <div class='input-group-date' id='datetimepickerDeparture'>
                        <label class="control-label" for="DepartureDate">Departure Date</label>
                        @Html.TextBoxFor(m => m.DepartureDate, new { @type = "date", @class = "form-control" })
                    </div>
                    if (!Model.AnnounceMessage.IsEmpty())
                    {
                        <div class="text-danger">@Model.AnnounceMessage</div>
                    }
                    <input type="submit" class="btn btn-primary mt-3" value="Booking" />
                }
            </div>
        </div>
    </div>
</main>

<script>
    //disable Return or not
    function willReturn() {
        document.getElementById("datetimeReturn").disabled = true;
    }

    function wontReturn() {
        document.getElementById("datetimeReturn").disabled = false;
    }



    //complete departure station or destination 
    var station = ["Ha Noi", "Ho Chi Minh", "Lam Dong", "Bien Hoa", "Da Nang"];



    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }


    autocomplete(document.getElementById("DepartureStation"), station);

    autocomplete(document.getElementById("DestinationStation"), station);
</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}